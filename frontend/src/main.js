// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞
function getCSRFToken() {
    return document.getElementById("csrf-token")?.value || null;
}

var csrfToken = getCSRFToken();

console.log("‚úÖ CSRF-—Ç–æ–∫–µ–Ω:", csrfToken);
if (!csrfToken) {
    console.error("‚ùå –û—à–∏–±–∫–∞: CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å HTML-–∫–æ–¥.");
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ª–∞–π–∫–æ–≤
window.toggleLike = function (postId) {
    if (!postId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: postId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!");
        return;
    }

    console.log(`üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∞–π–∫ –¥–ª—è –ø–æ—Å—Ç–∞ ID: ${postId}`);

    fetch(`/posts/${postId}/like/`, {
        method: 'POST',
        headers: {
            'X-CSRFToken': getCSRFToken(),
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status} - ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        console.log(`‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: ${data.total_likes}`);

        const likeCountElement = document.getElementById(`like-count-${postId}`);
        if (likeCountElement) {
            likeCountElement.innerText = data.total_likes;
        }

        // üî• –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
        let button = document.querySelector(`.like-button[data-post-id="${postId}"]`);
        if (button) {
            button.classList.toggle("btn-outline-primary", !data.liked);
            button.classList.toggle("btn-primary", data.liked);
        }
    })
    .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞:', error));
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
window.toggleFollow = function (event, button) {
    event.preventDefault();  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

    let userId = button.dataset.userId;
    if (!userId) {
        console.error("‚ùå –û—à–∏–±–∫–∞: userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.");
        return;
    }

    let isFollow = button.dataset.following === "false";
    let url = isFollow ? `/users/follow/${userId}/` : `/users/unfollow/${userId}/`;

    console.log(`üü† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${isFollow ? "–ü–æ–¥–ø–∏—Å–∫–∞" : "–û—Ç–ø–∏—Å–∫–∞"} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}`);

    fetch(url, {
        method: "POST",
        headers: {
            "X-CSRFToken": getCSRFToken(),
            "Content-Type": "application/json"
        },
        body: JSON.stringify({})
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status} - ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.message) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${data.message}`);

            // üî• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            const followersCountElement = document.getElementById("followers-count");
            if (followersCountElement && data.followers_count !== undefined) {
                followersCountElement.innerText = data.followers_count;
            }

            // üî• –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            button.classList.toggle("btn-primary", !isFollow);
            button.classList.toggle("btn-danger", isFollow);
            button.innerText = isFollow ? "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" : "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è";
            button.dataset.following = isFollow ? "true" : "false";
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
        }
    })
    .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ:", error));
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");

    // üî• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º toggleFollow –∫ –∫–Ω–æ–ø–∫–∞–º
    document.querySelectorAll(".follow-button").forEach(button => {
        button.addEventListener("click", function (event) {
            toggleFollow(event, this);
        });
    });

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    document.querySelectorAll(".follow-button").forEach(button => {
        let userId = button.dataset.userId;
        if (!userId) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId –≤ data-user-id.");
            return;
        }

        fetch(`/users/check_follow_status/${userId}/`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.is_following) {
                button.classList.replace("btn-primary", "btn-danger");
                button.innerText = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è";
                button.dataset.following = "true";
            } else {
                button.classList.replace("btn-danger", "btn-primary");
                button.innerText = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è";
                button.dataset.following = "false";
            }
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", error));
    });

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ Bootstrap
    if (typeof bootstrap === "undefined") {
        console.error("‚ùå –û—à–∏–±–∫–∞: Bootstrap –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ `base.html`.");
    }
});

