import logging

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt  # –î–ª—è —Ç–µ—Å—Ç–æ–≤
from .models import Post, PostImage, Tag
from .forms import PostForm


logger = logging.getLogger(__name__)

def post_list(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    logger.info("üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–æ–≤")

    posts = Post.objects.prefetch_related('images', 'likes').order_by('-created_at')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for post in posts:
        post.has_images = post.images.exists()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç `is_followed`, –ø—Ä–æ–≤–µ—Ä—è—è –ø–æ–¥–ø–∏—Å–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        post.is_followed = post.user.followers.filter(follower=request.user).exists()

    return render(request, 'posts/post_list.html', {'posts': posts})

def post_detail(request, post_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏"""
    post = get_object_or_404(Post, id=post_id)
    return render(request, 'posts/post_detail.html', {'post': post})


@login_required
def create_post(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏"""
    if request.method == 'POST':
        print("üìå DEBUG: –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –ª–∏ —Ñ–∞–π–ª—ã
        print("üìå DEBUG: request.FILES ->", request.FILES)

        form = PostForm(request.POST, request.FILES)
        if form.is_valid():
            post = form.save(commit=False)
            post.user = request.user
            post.save()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = request.FILES.getlist('images')
            if images:
                for image in images:
                    print(f"üìå DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º {image}")
                    PostImage.objects.create(post=post, image=image)

            messages.success(request, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return redirect('posts:post_list')
        else:
            print("‚ùå DEBUG: –§–æ—Ä–º–∞ –ù–ï –≤–∞–ª–∏–¥–Ω–∞!", form.errors)
    else:
        form = PostForm()

    return render(request, 'posts/create_post.html', {'form': form})


@login_required
def edit_post(request, post_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
    post = get_object_or_404(Post, id=post_id, user=request.user)

    if request.method == 'POST':
        form = PostForm(request.POST, request.FILES, instance=post)
        if form.is_valid():
            form.save()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏
            post.tags.clear()
            tags_input = request.POST.get('tags', '')
            if tags_input:
                tag_names = [t.strip() for t in tags_input.split(',')]
                for tag_name in tag_names:
                    tag, created = Tag.objects.get_or_create(name=tag_name)
                    post.tags.add(tag)

            messages.success(request, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            return redirect('posts:post_detail', post_id=post.id)

    else:
        form = PostForm(instance=post)

    return render(request, 'posts/edit_post.html', {'form': form, 'post': post})


@login_required
def delete_post(request, post_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç)"""
    if request.method == "POST":
        post = get_object_or_404(Post, id=post_id, user=request.user)
        post.images.all().delete()
        post.delete()
        messages.success(request, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω.")

    return redirect('posts:post_list')


@csrf_exempt  # –£–±–µ—Ä–∏ –µ–≥–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ CSRF-—Ç–æ–∫–µ–Ω–∞!
@login_required
def toggle_like(request, post_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∫ –ø–æ—Å—Ç—É"""
    post = get_object_or_404(Post, id=post_id)

    post = get_object_or_404(Post, id=post_id)

    if request.user in post.likes.all():
        post.likes.remove(request.user)  # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫
        liked = False
    else:
        post.likes.add(request.user)  # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        liked = True

    return JsonResponse({'liked': liked, 'total_likes': post.likes.count()})
